<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ICS1</title>
    <link href="/2025/02/19/ICS1/"/>
    <url>/2025/02/19/ICS1/</url>
    
    <content type="html"><![CDATA[<p>:::info<br>启动指令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker start <span class="hljs-keyword">my</span>-linux<br>docker exec -<span class="hljs-keyword">it</span> <span class="hljs-keyword">my</span>-linux /bin/bash<br>su - ics<br></code></pre></td></tr></table></figure><p>:::</p><h2 id="1-shell-常用指令"><a href="#1-shell-常用指令" class="headerlink" title="1. shell 常用指令"></a>1. shell 常用指令</h2><ul><li>pwd - print working directory</li><li>cd - change directory<br>  ~ ： the home directory<br>  .  ： the current directory<br>  .. ： the parent directory (the directory right above the current one)<br>  /  ： the root directory (has no parent)</li><li>sudo <command> - Root Permission</li></ul><h2 id="2-tool-常用指令"><a href="#2-tool-常用指令" class="headerlink" title="2. tool 常用指令"></a>2. tool 常用指令</h2><ul><li>cp &lt;source&gt; &lt;destination&gt; - copyfiles</li><li>mv &lt;source&gt; &lt;destination&gt; - move and rename files</li><li>rm &lt;filename&gt; - PERMANENTLY delete files</li><li>rmdir &lt;filename&gt; - PERMANENTLY delete empty directory</li><li>mkdir &lt;directory&gt;- make directories touch &lt;file&gt;- create an empty file</li><li>touch &lt;file&gt; - create an empty file</li><li>cat [FILE] - concatenates inputs and prints on the screen</li><li>sort - sort lines of text file<br>  -d: dictionary order<br>  -n: numeric sort<br>  -r: reverse<br>  -k: sort via a key<blockquote><p>i.e.: sort -k 2nr grade.txt</p></blockquote></li><li>head&#x2F;tail - print first (or last) lines of a file<blockquote><p>head -n 2 grade.txt</p></blockquote></li><li>| - (pipe) let you “chain” programs</li><li>grep [OPTION…] PATTERNS [FILE…]<br>  -c: prints count of matching lines<br>  -h: display matches without filenames<br>  -i: ignores case for matching<br>  -I: displays list of only filenames<br>  -n: display matches and line numbers<br>  -e exp: specificies expression with this option<br>  -f file: takes pattern from file<br>  -o: print only matching parts of lines<br>  -r: read all files under each directory, recursively<blockquote><p>i.e.:  grep this *</p></blockquote></li><li>awk -  data processing &#x2F; Average &#x2F; Max &#x2F; Min &#x2F; Get data in a certain column &#x2F; Get data that meets some condition <blockquote><p>i.e.: awk ‘{print $2}’打印了第二列</p></blockquote></li><li>sed - Replace: sed ‘s&#x2F;old&#x2F;new&#x2F;g’ file<br>  Replace in line 3: sed ‘3 s&#x2F;old&#x2F;new&#x2F;‘ file<br>  Delete line 3: sed ‘3d’ file<br>  Print line 3: sed -n ‘3p’ file<br>  Add line: sed ‘2i\This is a new line’ file</li><li></li></ul><h2 id="3-bash"><a href="#3-bash" class="headerlink" title="3. bash"></a>3. bash</h2><p> 显式调用 bash 来解释这个脚本，不需要脚本具有执行权限。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-找不到命令"><a href="#1-找不到命令" class="headerlink" title="1. 找不到命令"></a>1. 找不到命令</h3><ul><li><a href="https://command-not-found.com/ag">找不到命令</a>&#x2F;ask gpt</li><li>$ man <command> (if man pages excluded, try ‘’’sudo unminimize’’’)</li><li>-h&#x2F;–help</li></ul><h3 id="2-sudo拥有最高权限，as-superuser。因此-不要-sudo-rm-r"><a href="#2-sudo拥有最高权限，as-superuser。因此-不要-sudo-rm-r" class="headerlink" title="2. sudo拥有最高权限，as superuser。因此(不要 sudo rm -r &#x2F;)"></a>2. sudo拥有最高权限，as superuser。因此(不要 sudo rm -r &#x2F;)</h3><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p><a href="http://202.120.40.8:10680/courses/ics/tutorial/shell/">ICS Guidance</a></p><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h2><p><img src="https://notes.sjtu.edu.cn/uploads/upload_35f98e39a95fd21328a2195c8eb36c52.png"><br>    1. Working Directory（工作目录）：<br>    这是你日常进行文件编辑的地方。当你从仓库中检出代码时，Git 会将代码复制到工作目录中，你可以在这里查看文件、编辑文件、添加新文件或删除文件。<br>    2. Staging Index（暂存区）：<br>    暂存区是一个文件，保存了下次将提交到仓库的文件列表信息，可以看作是一个“预提交区域”。当你执行 git add 命令时，你告诉 Git 你想要提交哪些文件的更改，Git 会将这些更改放入暂存区。暂存区允许你分批次提交更改，而不是一次性提交工作目录中的所有更改。<br>    3. Repository（仓库）：<br>    仓库是 Git 用来保存项目历史的地方。它包括了项目的所有版本历史记录，包括提交历史、分支、标签等。仓库中有两个重要的组成部分：HEAD 和 commit 对象。<br>    4. HEAD：指向当前分支的最新提交。<br>    5. Commit Objects：记录了项目历史的快照，每个提交对象都包含了文件的快照、作者信息、提交信息等。</p><ul><li><p>git checkout -b git-tut</p><ul><li>Switched to a new branch ‘git-tut’</li></ul></li><li><p>git status</p></li><li><p>git commit：commits all changes added to staging area.<br>  -m means commit message (for description)</p></li><li><p>git log：unique commit id(哈希) + 分支信息<br>  git log -1 – &lt;filename&gt;最后一个修改的人</p></li><li><p>git show &lt;commit id&gt;：shows commit info with changes</p></li><li><p>git checkout &lt;branchname&gt;：Switch back to newest commit of the branch</p></li><li><p>git branch -d &lt;分支名&gt; : 删除该分支</p></li></ul><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore:"></a>.gitignore:</h2><ul><li>git config –global core.excludesfile ~&#x2F;.gitignore_global</li></ul><h2 id="remove-sensitive-data"><a href="#remove-sensitive-data" class="headerlink" title="remove sensitive data:"></a>remove sensitive data:</h2><ul><li>git filter-repo –path sensitive_file.txt –invert-paths</li></ul><h2 id="2-Working-with-Remote-Repo"><a href="#2-Working-with-Remote-Repo" class="headerlink" title="2. Working with Remote Repo"></a>2. Working with Remote Repo</h2><ul><li>git remote add &lt;name&gt; &lt;url&gt;(&lt;name&gt; : name of remote repository, &lt;url&gt;: url of remote repository (Gitlab&#x2F;Github&#x2F;Gitee…))</li><li>git branch –set-upstream-to&#x3D;&lt;remote&gt;：Bind local branch to remote branch</li><li>git clone &lt;url&gt;：download code from remote</li></ul><p>:::info<br>homework：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">fetch</span> -a<br>git checkout lab1<br>git <span class="hljs-keyword">add</span><br>git <span class="hljs-keyword">commit</span> -m “&lt;message&gt;”<br>“git push”  : <span class="hljs-keyword">update</span> changes <span class="hljs-keyword">to</span> remote <span class="hljs-keyword">server</span><br>“git pull”  : pull code <span class="hljs-keyword">from</span> remote<br></code></pre></td></tr></table></figure><p>:::</p><ul><li>git checkout – hello.txt：You want to discard changes on some files</li><li>git revert &lt;commit id&gt;                add a new commit to undo</li><li>git reset –hard &lt;commit id&gt;      get back to old commits</li><li>git stash：temporarily remove modifications</li><li>git stash pop：pop back modificaions</li><li>git blame &lt;file&gt;：show who last edited which line</li></ul><p>:::info lab1<br>.&#x2F;dlc bits.c<br>(The dlc program runs silently unless it detects a problem)</p><p>.&#x2F;dlc -help<br>(check your programs for compliance with the coding style rules)</p><p>.&#x2F;btest -f isPositive<br>(to instruct btest to test only a single function)</p><ul><li><p>使用dlc编译器（.&#x2F;dlc）自动检查你的bits.c版本是否符合规则：<br>unix&gt; .&#x2F;dlc bits.c<br>如果你的代码没有问题，dlc将默默返回。否则，它会打印出标记任何问题的消息。一旦你有了合法的解决方案，可以使用.&#x2F;btest程序测试其正确性。</p></li><li><p>使用btest测试正确性，此目录中的Makefile将你的bits.c版本与其他代码编译，创建一个名为btest的程序（或测试工具）。<br>运行以下命令进行编译：<br>unix&gt; make<br>使用以下命令运行程序：<br>unix&gt; .&#x2F;btest [可选的命令行参数]<br>在从一个平台移动到另一个平台时，你需要删除旧版本的btest并生成一个新的。使用以下命令：<br>unix&gt; make clean<br>unix&gt; make</p></li><li><p>btest的功能<br>btest通过运行多个测试用例来测试你的过程的正确性。它不保证进行全面评估。此外，它也不检查你的代码是否符合编码规范。请使用dlc来做到这一点。<br>以下是btest的命令行选项：<br>-e N 限制单个函数报告的错误数量为N（默认无限制）<br>-f Name 仅检查指定名称的函数<br>-g 打印简洁报告（隐含-v 0和-e 0）<br>-h 打印选项列表<br>-v N 设置详细程度为N<br>N&#x3D;0 仅给出最终得分<br>N&#x3D;1 还报告单个正确性得分（默认）</p></li></ul><p>执行算术右移。<br>当将整数右移超过字大小时，行为是不可预测的。<br>:::</p><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><ol><li><p>objdump –d | -D &lt;object-file&gt;<br>-d是输出txt，-D还输出数据</p></li><li><p>&#x2F;&lt;&gt; 用于匹配</p></li><li><p>int printf(const char * format, … ) :First argument is one string, and is in %rdi</p></li><li><p>gcc : Compiling (HINTS: don’t miss warning)<br> gcc –Wall –o test test.c<br><img src="https://notes.sjtu.edu.cn/uploads/upload_ee8cf87b860e47ac5bff2772ea194be4.png"><br><img src="https://notes.sjtu.edu.cn/uploads/upload_8edb25d7253bcfdab898be679ffabda7.png"><br><img src="https://notes.sjtu.edu.cn/uploads/upload_fda82547c07396360f2ae96ba705dcfa.png"></p></li><li></li></ol><h1 id="关于文件权限"><a href="#关于文件权限" class="headerlink" title="关于文件权限"></a>关于文件权限</h1><ol><li><p>chown和chmod 777的区别：<br> chown只更改了所有者，而chmod 777 给了太多权限，使得所有人可编辑<br> sudo chown –R ics:ics ics-labs</p></li><li><p>ls -lh</p></li><li><p> d: 表示这是一个目录（directory）。<br> r: 表示读取权限（read）。<br> w: 表示写入权限（write）。<br> x: 表示执行权限（execute）。</p><p> 第一个字符: 用户owner（文件或目录的所有者）的权限。<br> 第二个字符: 用户组group（与文件或目录所有者在同一组的用户）的权限。<br> 第三个字符: 其他用户others（不属于该组或不是文件所有者的用户）的权限。</p><p> e.g. drwxr-xr-x</p></li></ol><h1 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 vim"></a>编辑器 vim</h1><ol><li><p>vimtutor<br><img src="https://notes.sjtu.edu.cn/uploads/upload_b04b0d10df7bc8f26e8ad1560f236489.png"></p></li><li><p>to change git editor: git config –global core.editor “vim”</p></li><li><p>&#x2F; : search mode</p></li><li><p>yy : yank (copy) the entire line.</p></li><li><p>G : jump to the last line of the file.</p></li><li><p>p : paste the line you copied.</p></li></ol><h1 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h1><p>:::info<br>sudo apt-get install locales fonts-noto-cjk<br>sudo locale-gen zh_CN.UTF-8<br>echo ‘export LC_CTYPE&#x3D;zh_CN.UTF-8’ &gt;&gt; ~&#x2F;.bashrc<br>source ~&#x2F;.bashrc<br>source ~&#x2F;.bashrc<br>:::</p><h1 id="SEP"><a href="#SEP" class="headerlink" title="SEP"></a>SEP</h1><h2 id="1-gdb"><a href="#1-gdb" class="headerlink" title="1. gdb"></a>1. gdb</h2><ul><li>g++ -o &lt;输出文件&gt; &lt;输入文件&gt;</li><li>g++ -g -o &lt;输出文件&gt; &lt;输入文件&gt; （有-g gdb才能看到运行过程中的值）</li><li>valgrind &lt;输入文件&gt;<br>g++ -g -o &lt;输出文件&gt; valgrind-&lt;输入文件&gt; :检测内存溢出<br>valgrind –leak-check&#x3D;full .&#x2F;your_program</li><li>gdb &lt;g++输出的那个文件&gt;</li><li>(gdb) start :从main()开始</li><li>(gdb) break n :在第n行添加断点，n为行号</li><li>(gdb) break n if… :可以增加条件</li><li>(gdb) p “variable” :输出该变量的值</li><li>(gdb) p&#x2F;x n :将n以十六进制打印</li><li>(gdb) next :执行下一行（对应step over）（可缩写为n）</li><li>(gdb) step :步入</li><li>(gdb) continue :再次到断点</li><li>(gdb) print i &#x3D; 2000 :注意这是赋值语句哦</li><li>(gdb) info breakpoints :可以看到所有的断点</li><li>(gdb) delete n :删除第n个breakpoint</li><li>(gdb) until :会把整个for循环执行完</li><li>(gdb) layout</li><li>(gdb) frame n :跳入第几层栈（如函数调用函数）</li></ul><h2 id="2-brendangregg"><a href="#2-brendangregg" class="headerlink" title="2. brendangregg"></a>2. brendangregg</h2><p><a href="https://github.com/brendangregg/FlameGraph/blob/master/README.md">brendangregg</a></p><h2 id="3-git二分定位bug"><a href="#3-git二分定位bug" class="headerlink" title="3. git二分定位bug"></a>3. git二分定位bug</h2><p><a href="https://www.ruanyifeng.com/blog/2018/12/git-bisect.html">bisect</a></p><ul><li>git bisect start HEAD 4d83cf<br>  执行上面的命令以后，代码库就会切换到这段范围正当中的那一次提交，本例是第51次提交。</li><li>git bisect good&#x2F;bad</li></ul><h2 id="4-内存工具"><a href="#4-内存工具" class="headerlink" title="4.内存工具"></a>4.内存工具</h2><ul><li>Valgrind<br>检测内存泄漏、未初始化的内存使用和无效的内存访问</li><li>AddressSanitizer (ASan)：<br>检测内存泄漏、越界访问和使用已释放的内存</li><li>MemorySanitizer (MSan)<br>检测未初始化的内存读取</li><li>ThreadSanitizer (TSan)<br>检测多线程程序中的数据竞争问题</li></ul><h2 id="linux-vpn"><a href="#linux-vpn" class="headerlink" title="linux - vpn"></a>linux - vpn</h2><p>:::info<br>sudo ipsec up “sjtu-student”   #学生VPN</p><hr><p>sudo ipsec down “sjtu-student”   #学生VPN<br>:::</p>]]></content>
    
    
    
    <tags>
      
      <tag>se</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国音乐史</title>
    <link href="/2025/02/19/%E4%B8%AD%E5%9B%BD%E9%9F%B3%E4%B9%90%E5%8F%B2/"/>
    <url>/2025/02/19/%E4%B8%AD%E5%9B%BD%E9%9F%B3%E4%B9%90%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>考试：16周开卷考试</p></blockquote><p>中国音乐史：哑巴音乐，来自史料<br>中国传统音乐：活着的，来自历史但能听到的<br>中国近现代音乐：很大的转折<br>中国民族民间音乐</p><p>中国音乐文化奠基（史前-唐）（断代史）（史料研究）<br>中国音乐文化的繁盛（宋元明清）（专题研究）<br>近代以来中国音乐文化发展</p><blockquote><p>40%平时成绩：三次随机点名（15分），小组汇报（10分），平时作业*2（10分），课堂问答（5分）<br>60%期末成绩：5道听辨（20分），选择8道（40分），简答2题（20分），论述1题（20分）</p></blockquote><h1 id="Class-1"><a href="#Class-1" class="headerlink" title="Class 1:"></a>Class 1:</h1><p>“奉五音为正声”——不代表只用五音<br>“听凤皇之鸣，以别十二律。 其雄鸣为六，雌鸣亦六，以比黄锺之宫，适合；”<br>“质乃效山林溪谷之音以歌，乃以麋 各置缶而鼓之，乃拊石击石，以象上帝玉磬之音，以致舞百兽。 瞽叟乃拌五弦之瑟，作以为十五弦之瑟。”</p><p>骨笛（新石器时代）：仙鹤的骨头</p><h3 id="中国古代关于音乐起源"><a href="#中国古代关于音乐起源" class="headerlink" title="中国古代关于音乐起源"></a>中国古代关于音乐起源</h3><p>1、模仿说<br>2、感情说<br>3、劳动说</p><h3 id="什么是音乐？"><a href="#什么是音乐？" class="headerlink" title="什么是音乐？"></a>什么是音乐？</h3><p>music：缪斯，掌管美与艺术的神<br>樂：</p><ul><li>一个人拿着铃（可以让上天听到声音）、单面鼓一样的东西（鼓的声音可以让人进入一种状态）（萨满仪式中，必备的两种乐器）</li><li>即药，草字头很晚加上的，即生病求助于神学</li><li>丝附木上，某种鼓（jian gu），一般仅在宫廷音乐中出现。</li><li>立木于野，祭祀品给乌鸦吃掉了（即上天接受了）</li><li>绵绵瓜瓞，葫芦，象征图腾（祭祀典礼的核心诉求，多子多福）</li></ul><p>因此礼乐常被捆绑，乐舞也常被放在一起</p><h1 id="Class-2"><a href="#Class-2" class="headerlink" title="Class 2:"></a>Class 2:</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Music</tag>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/18/hello-world/"/>
    <url>/2025/02/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
